上午：
	多表查询：
	
		一、概念：对多张表进行查询操作；
		
		二、笛卡尔积：直接使用两张表作为查询的表来进行查询的话，会产生两张表数据量的乘积数量的
							   数据，这种查询的方式称之为产生了笛卡尔积，在工作中，这种查询的方式是我们
							   尽量进行避免的，只有在很少的时候会特意地去使用笛卡尔积，比如世界杯的小组
							   循环赛；我们通常使用cross join来连接两张需要进行求笛卡尔积的表；
							   
							   例：select * from emp cross join dept;；
						
		三、内连接：
				
				1、等值连接：根据几张表中的关联条件来进行连接；
						
					 例：select * from emp,dept where emp.deptno = dept.deptno;
					 
					 如果你想查询出几张有关联关系的表中的一些字段的话，那么我们的写法如下：
					 
					 例：select emp.ename,emp.job,dept.dname,dept.loc from emp,dept 
					 			where emp.deptno = dept.deptno;
					 			
					 注意：使用上述的写法虽然可以查询你想要的数据，但是这样写oracle觉得太过于臃肿，
					 		   所以，我们在使用多表查询时，如果想查询出他们某些字段的话，我们通常使用
					 		   别名的形式---即在from后面的表名后面跟上你起的自定义名字，然后在查询条件
					 		   和where后面就可以以别名+列名的形式来进行查询；
					 
					 例：select e.ename,e.job,d.dname,d.loc from emp e,dept d 
					 			where e.deptno = d.deptno;
					 			
					 练习：查询出每个人的姓名、工资以及他领导的姓名以及工资；
					 
					 练习：把上面例子中加上他们各自的部门名称；
					 
					 练习：查询出每个雇员的姓名、工资、部门名称、工资所在等级以及领导的姓名及领导
					 		   的工资和领导工资所在公司的等级；
					 		   
					 练习：在上面的基础上，加一个显示工资等级的要求
					 		   比如：等级是1的话，那么显示第一等级；
					 		   			......
					 		   			
					 注意：当进行多张表的连接查询时，多张表之间用逗号隔开，对多张表的关联关系进行在
					 		   where后面说明时，关联关系之间用‘and’隔开；
					 		   			
				2、不等值连接
					 
					 使用方法跟等值连接一样，只不过where条件后面的等于号换成了不等于号；
					 
				3、自然连接（natrual join）
					 
					 把两张表中有关联关系的所有数据进行自然的连接，而不需要你去写他们的联系条件；
					 它的效果和使用等值连接一样；
					 
					 例：
					 	select * from emp natural join dept;
					 	
		四：外连接
				
				1、左/右连接（+）
					 首先，这种连接方式是Oracle独有的连接方式，这种连接方式是直接可以在等值连接的
					 基础上进行修改的连接；
					 然后，你想把那个表展示出来，那么那张表就应该作为一张基表，
					 最后，这种连接的使用方式是直接在等值连接的where后面的联系关系上直接加一个
					 ‘（+）’在你想作为基表的另外一边；
					 
					 规律：（+）在“=”左边，表示右连接；
					 		   （+）在“=”右边，表示左连接；
					 
					 注意：上面规律所说的“=”左右边并不是把加号放在等于号的左边和右边，而是放在等
					 		   于号连接的那两个连接条件的后面；
					 		   左连接表示左边的表为基表，右连接表示右边的表为基表，基表则代表着要打印
					 		   该表的所有数据；
					 
				2、左外连接/右外连接
					 含义跟上面的左右连接一样，但是在书写上有很大的差异，不能直接从内连接改动成为
					 外连接，需要在特定的地方加上一些关键字才行；
					 
					 左外连接：left join/left outer join;
					 右外连接：right join/right outer join;
					 
					 使用方式：
					 	a、上面的左右连接除了在where后面的连接条件上面后面加一个（+）号之外，其余
					 		  部分跟内连接没啥区别；
					 		  
					 	b、使用这种左外右外连接的话，需要从from的后面就进行更改，不能使用逗号来隔开
					 		 几个不同的表名，而需要使用你想把那张表作为基表就使用哪种对应的外连接；并
					 		 且连接条件不再是where，而是on关键字；
					 		 
					 	c、在日常工作中，不推荐第一种，因为无法进行与其他数据库的数据交换；通过这个
					 		 例子可以看出，在我们日后工作开发过程中，尽量使用通用性较强的语法规范；
					 		 
					 on与where的区别：
					 	当我们使用外连接的时候，on通常会取代where的位置来进行连接条件的存放，但是
					 	on后面，只能跟连接条件，如果有其他的判断条件的话，请使用where；
					 	
					口诀：左外连接（+）在右；
							  右外连接（+）在左；
							  有（+）不全显；
							  无（+）才全显；
							  
			    3、全外连接（满外连接）（full outer join）
			    		 当你想把两张表中所有没有关联关系的数据都显示出来的话，可以使用全外连接，简单的
			    		 说，这种连接方式，就是把两张表同时作为基表；
			    		 
			    		 例：
			    		 	select * from emp full outer join dept on emp.deptno = dept.deptno;
			    		 
			    		 注：全外连接除了在一些特殊的场合需要全部显示多张表的信息之外，在我们不明确需要
			    		 	    用左连接还是右连接的时候，可以用来进行表信息的查看然后进行判断；记得，使用
			    		 	    全外连接也必须有连接条件；
	
		  五、子查询
		  
		  		 1、概念：在一个查询的内部还包括了另外一个查询；
		  		 
		  		 例一：查询出比雇员编号7654的雇员工资高的雇员的所有信息；
		  		 select * from emp where sal>(select sal from emp where empno = 7654);
		  		 
		  		 例二：求出每个部门的最低工资的雇员的信息；
		  		 select * from emp where sal in (select min(sal) from emp group by deptno)
				 
				 2、单行子查询：
				 	  子查询里面只会返回一行数据的查询，对于这种查询，我们可以在主查询里面使用>,<
				 	  =,>=,<=,<>这些操作符来进行条件的判断；
				 	  
				 	  比如上面例子的例一；
				 	  
				 3、多行子查询：
				 	  顾名思义，这种子查询代表着在子查询里面的返回值会有多条，那么出现这种情况的时候
				 	  我们在主查询里面有三种操作符可以使用：
				 	  
				 	  a、in：代表主查询中的条件只要满足子查询中返回值的任意一条就可以；
				 	  
				 	  b、>或<+all：代表主查询中的条件需要满足子查询返回值的所有值；
				 	  
				 	  c、操作符+any：代表主查询中的条件只需要满足子查询返回值的任意一个就成立
				 	  
				 	  d、exists：含义跟in一样，它跟的in的区别主要是体现在效率上，如果子查询的查询量
				 	  				   很大的话，那么使用exists，如果主查询的查询量很大的话，使用in，在一般
				 	  				   的开发中，子查询的查询量都不会小，使用exists可以极大的提高查询效率；
				 	  				   
				 4、子查询能够在哪里出现：
				 
				 	  a、出现在where条件中，相当于把整个子查询的返回值作为一个视图来进行操作；
				 	  
				 	  b、出现在select列表中，但是需要注意子查询此时只能是单行子查询，用的很少；
				 	  
				 	  c、能出现在having中，出现的非常少；
				 	  
				 	  d、出现在from中；
				 	  
				 5、子查询的特点：
				 	  
				 	  a、子查询必须套上括号，并且能够出现在select、from、where和having中；
				 	  
				 	  b、如果子查询的结果为空的话，则主查询也查不到任何值；
				 	  
				 	  c、子查询所查询的表可以与主查询不一样，只需要他们之间有关联关系即可（只需要
				 	  	   子查询的返回结果能够被主查询所使用就行）；
				 	  	   
		练习：要求查出部门名称、部门的员工数、部门的平均工资和部门的最低收入雇员的姓名；
				  select d.dname,e2.d,e2.a,e1.ename,e2.m from emp e1,
     					  (select deptno,count(*) d,avg(sal+nvl(comm,0)) a,min(sal) m from emp group by deptno) e2,
             					  dept d where e2.deptno = d.deptno and e1.sal = e2.m;
             					  
        伪列：rownum
        
        			 在Oracle中，一张表每插入一条数据，都会有一个数字对应进行匹配，这个数字从1开始，
        			 每次递增1，一直递增，这个列是隐藏的，叫做rownum，并且这个列不需要你在建表的时
        			 候特意定义出来，它是建表时系统自带的；
        			 
        			 作用：我们可以根据这个特点，来对一个表的查询结果进行排序，排序之后，这个rownum
        			 		   还是从1到无穷大来对应查询的结果从上往下，所以，我们可以使用子查询和rownum
        			 		   来获取你想要的某几行数据，比如求出收入最高的前面名等等
        			 		   
        			 例：select * from ( select * from emp order by sal desc) where rownum<=3;