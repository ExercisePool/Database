分组函数：
		
		1、count：数量统计；
			 
			 我们一般使用count来统计一张表中的数据数量或者是统计一张表中某个字段的数量（如果你需
			 要统计的字段有重复的情况发生的话，要附带着使用distinct来去重复再进行数量统计）；
			 
			 例：select count(*) from emp;
 
				    select count(distinct(deptno)) from emp;
				    
		2、max、min、avg、sum；
			 注意：在使用分组函数来进行某些操作的时候，会自动忽略掉空值；
			 
			 例：select avg(nvl(comm,0)) from emp;
			 
		3、group by：分组查询；
		
			 按照你想要的分组规则来对数据进行相同数据为一组并且进行分组的操作；
			 
			 例：查询出不同部门里面的员工数量：
			 	    select deptno,count(*) from emp group by deptno;
			 	    
			 如果某一天，你想对不同工作岗位进行分组的话，那么第一想法是把group by 后面的字段改为
			 job，但是会报错，因为这违反了分组查询的第一条定律：
			 
			 a）、如果列名（或者是单行函数）和组函数同时出现在查询条件中的话，那么必须在group by
			 	      后面跟上这个列名或者是单行函数所使用的列名；
			 	      
			 b）、如果你想查出各种job下的员工数量的话，那么如果你不使用group by，就会报错,也就是说，当组函数和
            字段名（或者单行函数）一起出现在查询条件中时，必须对字段名（或者单行函数的字段名）进行分组，否则
            不符合业务逻辑，就会报错；
			 
			 c）、如果你想在组函数中去使用带组函数的条件判断的话，需要使用having关键字；后面跟
			 		 组函数的判断条件；
			 		 
			where和having：
			
				a）、都是用来在sql语句中进行条件判断的关键字，后面都是跟条件判断语句；
				
				b）、where后面跟的是单行函数或者字段名的判断语句，having后面跟的是组函数的判断语句；
				
				c）、where一般放在from+表名之后，having一般放在group by+列名之后；
				
				例：
					select job,deptno,count(*) from emp where sal>1000 group by job,deptno 
					having max(sal)>1000;
			 		 
			 注意：单行函数（或字段名）可以在查询条件中出现多个，如果出现多个，就必须同时也出现
			 		   在group by中；
			 		   如果你想在使用分组查询之后再进行排序，那么order by 一定要写于最后面；
			 		   排序的时候，可以对别名进行排序；
			 		   order by后面可以接多个排序列名；
			 		   
		4、组函数的嵌套：
		
			 含义：就是使用多个组函数嵌套放在查询条件中；
			 
			 注意：组函数的嵌套不能跟单行函数或者是列名一起使用，并且必须使用group by来进行分组，
			 		   此时，因为查询条件中没有单行函数，所以分组的条件可以自己根据需求来指定；
			 		   
			 		   
			 例：查询出部门平均工资中的最大值
				 	select deptno,avg(sal) from emp group by deptno;
					select max(avg(sal)) from emp group by deptno;
					
			  注：第一行语句只是为了方便去理解第二行语句，实际上与嵌套函数无关；
			  
			  这里可以看出：查询列表中出现的单行函数一定要出现在group by中，但是group by中出现
			  						 的单行函数不一定需要出现在查询列表中（比如嵌套组函数）；
			 		   
		练习：查询平均工资大于1200的部门、岗位以及平均工资值，并且以部门和工作进行升序排序	 
				  
		练习：在上面的题目中加一个条件：包含1981年5月1日和之后入职
				  
				  select deptno,job,avg(sal) from emp where hiredate>=to_date('1981-05-01','yyyy-mm-dd') 
				  		group by deptno,job having avg(sal)>1200 order by deptno,job;


	多表查询：
	
		一、概念：对多张表进行查询操作；
		
		二、笛卡尔积：直接使用两张表作为查询的表来进行查询的话，会产生两张表数据量的乘积数量的
							   数据，这种查询的方式称之为产生了笛卡尔积，在工作中，这种查询的方式是我们
							   尽量进行避免的，只有在很少的时候会特意地去使用笛卡尔积，比如世界杯的小组
							   循环赛；我们通常使用cross join来连接两张需要进行求笛卡尔积的表；
							   
							   例：select * from emp cross join dept;；
						
		三、内连接：
				
				1、等值连接：根据几张表中的关联条件来进行连接；
						
					 例：select * from emp,dept where emp.deptno = dept.deptno;
					 
					 如果你想查询出几张有关联关系的表中的一些字段的话，那么我们的写法如下：
					 
					 例：select emp.ename,emp.job,dept.dname,dept.loc from emp,dept 
					 			where emp.deptno = dept.deptno;
					 			
					 注意：使用上述的写法虽然可以查询你想要的数据，但是这样写oracle觉得太过于臃肿，
					 		   所以，我们在使用多表查询时，如果想查询出他们某些字段的话，我们通常使用
					 		   别名的形式---即在from后面的表名后面跟上你起的自定义名字，然后在查询条件
					 		   和where后面就可以以别名+列名的形式来进行查询；
					 
					 例：select e.ename,e.job,d.dname,d.loc from emp e,dept d 
					 			where e.deptno = d.deptno;
					 			
					 练习：查询出每个人的姓名、工资以及他领导的姓名以及工资；
					 
					 练习：把上面例子中加上他们各自的部门名称；
					 
					 练习：查询出每个雇员的姓名、工资、部门名称、工资所在等级以及领导的姓名及领导
					 		   的工资和领导工资所在公司的等级；
					 答案：select e1.ename,e1.sal,d1.dname,s1.grade,e2.ename,e2.sal,d2.dname,s2.grade 
                            from emp e1,emp e2,dept d1,dept d2,salgrade s1,salgrade s2 
                            where e1.mgr = e2.empno 
                                and e1.deptno = d1.deptno 
                                and e2.deptno = d2.deptno 
                                and e1.sal between s1.losal and s1.hisal 
                                and e2.sal between s2.losal and s2.hisal;
					 		   
					 练习：在上面的基础上，加一个显示工资等级的要求
					 		   比如：等级是1的话，那么显示第一等级；
					 		   			......
					 		   			
					 注意：当进行多张表的连接查询时，多张表之间用逗号隔开，对多张表的关联关系进行在
					 		   where后面说明时，关联关系之间用‘and’隔开；
					 		   			
				2、不等值连接
					 
					 使用方法跟等值连接一样，只不过where条件后面的等于号换成了不等于号；
					 
				3、自然连接（natrual join）
					 
					 把两张表中有关联关系的所有数据进行自然的连接，而不需要你去写他们的联系条件；
					 它的效果和使用等值连接一样；
					 
					 例：
					 	select * from emp natural join dept;
					 	
		四：外连接
				
				1、左/右连接（+）
					 首先，这种连接方式是Oracle独有的连接方式，这种连接方式是直接可以在等值连接的
					 基础上进行修改的连接；
					 然后，你想把那个表的所有数据展示出来，那么那张表就应该作为一张基表，
					 最后，这种连接的使用方式是直接在等值连接的where后面的联系关系上直接加一个
					 ‘（+）’在你想作为基表的另外一边；
					 
					 规律：（+）在“=”左边，表示右连接；
					 		   （+）在“=”右边，表示左连接；
					 
					 注意：上面规律所说的“=”左右边并不是把加号放在等于号的左边和右边，而是放在等
					 		   于号连接的那两个连接条件的字段后面；
					 		   左连接表示左边的表为基表，右连接表示右边的表为基表，基表则代表着要打印
					 		   该表的所有数据；
					 
				2、左外连接/右外连接
					 含义跟上面的左右连接一样，但是在书写上有很大的差异，不能直接从内连接改动成为
					 外连接，需要在特定的地方加上一些关键字才行；
					 
					 左外连接：left join/left outer join;
					 右外连接：right join/right outer join;
					 
					 使用方式：
					 	a、上面的左右连接除了在where后面的连接条件上面后面加一个（+）号之外，其余
					 		  部分跟内连接没啥区别；
					 		  
					 	b、使用这种左外右外连接的话，需要从from的后面就进行更改，不能使用逗号来隔开
					 		 几个不同的表名，而需要使用你想把那张表作为基表就使用哪种对应的外连接；并
					 		 且连接条件不再是where，而是on关键字；
					 		 
					 	c、在日常工作中，不推荐第一种，因为无法进行与其他数据库的数据交换；通过这个
					 		 例子可以看出，在我们日后工作开发过程中，尽量使用通用性较强的语法规范；
					 	
            d、由于左右外连接的本质其实就是对基表位置的确定，所以在开发中，我们通常就使用
               左外连接，习惯性把需要做基表的表放在连接的第一个位置

					 on与where的区别：
					 	当我们使用外连接的时候，on通常会取代where的位置来进行连接条件的存放，但是
					 	on后面，只能跟连接条件，如果有其他的判断条件的话，请使用where；
					 	
					口诀：左外连接（+）在右；
						  右外连接（+）在左；
							  
			    3、全外连接（满外连接）（full outer join）
			    		 当你想把两张表中所有没有关联关系的数据都显示出来的话，可以使用全外连接，简单的
			    		 说，这种连接方式，就是把两张表同时作为基表；
			    		 
			    		 例：
			    		 	select * from emp full outer join dept on emp.deptno = dept.deptno;
			    		 
			    		 注：全外连接除了在一些特殊的场合需要全部显示多张表的信息之外，在我们不明确需要
			    		 	    用左连接还是右连接的时候，可以用来进行表信息的查看然后进行判断；记得，使用
			    		 	    全外连接也必须有连接条件；
	
		  五、子查询
		  
		  		 1、概念：在一个查询的内部还包括了另外一个查询；
		  		 
		  		 例一：查询出比雇员编号7654的雇员工资高的雇员的所有信息；

		  		 select * from emp where sal>(select sal from emp where empno = 7654);
		  		 
		  		 例二：求出每个部门的最低工资的雇员的信息；
		  		 select * from emp where sal in (select min(sal) from emp group by deptno)
				 
				 2、单行子查询：
				 	  子查询里面只会返回一个数据的查询，对于这种查询，我们可以在主查询里面使用>,<
				 	  =,>=,<=,<>这些操作符来进行条件的判断；
				 	  
				 	  比如上面例子的例一；
				 	  
				 3、多行子查询：
				 	  顾名思义，这种子查询代表着在子查询里面的返回值会有多个，那么出现这种情况的时候
				 	  我们在主查询里面有三种操作符可以使用：
				 	  
				 	  a、in：代表主查询中的条件只要满足子查询中返回值的任意一条就可以；
				 	  
				 	  b、>或<+all：代表主查询中的条件需要满足子查询返回值的所有值；
				 	  
				 	  <ANY 意思是小于最大值。 >ANY 意思是大于最小值。 =ANY 等同于 IN。
                      <ALL 意思是小于最小值。 >ALL 意思是大于最大值。
                      
                      练习：查询出工资大于部门30里面工资最高的员工信息
				 	  
				 	  c、操作符+any：代表主查询中的条件只需要满足子查询返回值的任意一个就成立
				 	  

				 	  				   
				 4、子查询能够在哪里出现：
				 
				 	  a、出现在where条件中，相当于把整个子查询的返回值作为一个视图来进行操作；
				 	  
				 	  b、出现在select列表中，但是需要注意子查询此时只能是单行子查询，用的很少；
				 	  
				 	  c、能出现在having中，出现的非常少；
				 	  
				 	  d、出现在from中；
				 	  
				 5、子查询的特点：
				 	  
				 	  a、子查询必须套上括号，并且能够出现在select、from、where和having中；
				 	  
				 	  b、如果子查询的结果为空的话，则主查询也查不到任何值；
				 	  
				 	  c、子查询所查询的表可以与主查询不一样，只需要他们之间有关联关系即可（只需要
				 	  	   子查询的返回结果能够被主查询所使用就行）；
				 	  	   
		练习：要求查出部门名称、部门的员工数、部门的平均工资和部门的最低收入雇员的姓名；
				  select d.dname,a.num,a.avgsal,e.ename,e.sal 
from (select deptno,count(*) num,avg(sal) avgsal,min(sal+nvl(comm,0)) mincomm from emp group by deptno) a,
dept d,emp e where e.deptno = d.deptno and e.sal = a.mincomm;
             					  
        伪列：rownum
        
        			 在Oracle中，一张表每插入一条数据，都会有一个数字对应进行匹配，这个数字从1开始，
        			 每次递增1，一直递增，这个列是隐藏的，叫做rownum，并且这个列不需要你在建表的时
        			 候特意定义出来，它是建表时系统自带的；
        			 
        			 作用：我们可以根据这个特点，来对一个表的查询结果进行排序，排序之后，这个rownum
        			 		   还是从1到无穷大来对应查询的结果从上往下，所以，我们可以使用子查询和rownum
        			 		   来获取你想要的某几行数据，比如求出收入最高的前面名等等
        			 		   
        			 例：查询出工资排名前三的员工信息
        			 select * from ( select * from emp order by sal desc) where rownum<=3;
